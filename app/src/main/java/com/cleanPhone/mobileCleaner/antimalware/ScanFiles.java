package com.cleanPhone.mobileCleaner.antimalware;

import android.content.Context;
import android.database.Cursor;
import android.provider.MediaStore;

import com.google.firebase.crashlytics.buildtools.reloc.org.apache.commons.io.FilenameUtils;
import com.cleanPhone.mobileCleaner.similerphotos.AsyncTask;
import com.cleanPhone.mobileCleaner.utility.FileUtil;
import com.cleanPhone.mobileCleaner.utility.GlobalData;
import com.cleanPhone.mobileCleaner.utility.SharedPrefUtil;
import com.cleanPhone.mobileCleaner.utility.Util;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;

public class ScanFiles extends AsyncTask<String, String, ArrayList> {
    public Context f4818a;
    private HashMap<String, Boolean> hmExtnsOtherMediaAndDocs;

    public ScanFiles(Context context) {
        this.f4818a = context;
    }

    private boolean isWhiteList(long j) {
        ArrayList arrayList;
        try {
            arrayList = (ArrayList) GlobalData.getObj(this.f4818a, "av_white");
        } catch (Exception e) {
            e.printStackTrace();
            arrayList = null;
        }
        if (arrayList == null) {
            return false;
        }
        for (int i = 0; i < arrayList.size(); i++) {
            if (((FilesInclude) arrayList.get(i)).getCRC64() == j) {
                Util.appendLogmobicleanTest("SCANFILES", "file is whitelisted ", "dblog.txt");
                return true;
            }
        }
        Util.appendLogmobicleanTest("SCANFILES", "file is not whitelisted ", "dblog.txt");
        return false;
    }

    private void makeHashMapExtnsOtherMediaAndDocs() {
        String[] strArr = {"mp4", "3gp", "avi", "mpeg", "jpeg", "jpg", "png", "gif", "mp3", "tiff", "tif", "bmp", "svg", "webp", "webm", "flv", "wmv", "f4v", "swf", "asf", "ts", "mkv", "aac", "ogg", "m4a", "wav", "wma", "mmf", "mp2", "flac", "au", "ac3", "mpg", "mov"};
        this.hmExtnsOtherMediaAndDocs = new HashMap<>();
        for (int i = 0; i < 34; i++) {
            this.hmExtnsOtherMediaAndDocs.put(strArr[i].toLowerCase(), Boolean.TRUE);
        }
    }

    @Override
    public ArrayList doInBackground(String... strArr) {
        File file;
        String str;
        if (ScannigActivity.stopScanning) {
            return new ArrayList();
        }
        makeHashMapExtnsOtherMediaAndDocs();
        ArrayList arrayList = new ArrayList();
        Cursor query = this.f4818a.getContentResolver().query(MediaStore.Files.getContentUri("external"), new String[]{"_id", "_data", "_display_name", "_size"}, null, null, "_size DESC");
        if (query != null) {
            int columnIndex = query.getColumnIndex("_data");
            Context applicationContext = this.f4818a.getApplicationContext();
            ArrayList<Long> fileData = new DBHelper(applicationContext, new SharedPrefUtil(this.f4818a).getInt(SharedPrefUtil.CURRENTDB) + GlobalData.DB_NAME).getFileData();
            int i = 0;
            while (i < query.getCount()) {
                if (ScannigActivity.stopScanning) {
                    i = query.getCount() - 1;
                }
                query.moveToPosition(i);
                try {
                    str = query.getString(columnIndex);
                    try {
                        file = new File(str);
                        try {
                            Boolean bool = this.hmExtnsOtherMediaAndDocs.get(FilenameUtils.getExtension(file.getName()).toLowerCase());
                            if (bool == null) {
                                bool = Boolean.FALSE;
                            }
                            if (!bool.booleanValue()) {
                                long convertCRC64 = FileUtil.convertCRC64(CheckDBupdated.calculateMD5(file));
                                if (fileData.contains(Long.valueOf(convertCRC64)) && !isWhiteList(convertCRC64)) {
                                    arrayList.add(new FilesInclude(file, convertCRC64, file.length(), "", file.getName(), false));
                                }
                                if (i % 10 == 0) {
                                    publishProgress("files", file.getName(), String.valueOf(i), String.valueOf(query.getCount()));
                                }
                            }
                        } catch (Exception unused) {
                            if (str != null) {
                                file = new File(str);
                            }
                            if (file != null) {
                                publishProgress("files", file.getName(), String.valueOf(i), String.valueOf(query.getCount()));
                                i++;
                            }
                            i++;
                        }
                    } catch (Exception unused2) {
                        file = null;
                    }
                } catch (Exception unused3) {
                    file = null;
                    str = null;
                }
                i++;
            }
        }
        if (query != null) {
            query.close();
        }
        return arrayList;
    }
}
