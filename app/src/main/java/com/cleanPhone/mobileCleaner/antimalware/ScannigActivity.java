package com.cleanPhone.mobileCleaner.antimalware;

import android.animation.ObjectAnimator;
import android.annotation.SuppressLint;
import android.app.Dialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ResolveInfo;
import android.graphics.PorterDuff;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.ColorDrawable;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;


import com.cleanPhone.mobileCleaner.MobiClean;
import com.cleanPhone.mobileCleaner.R;
import com.cleanPhone.mobileCleaner.animate.RadarScanView;
import com.cleanPhone.mobileCleaner.similerphotos.MySharedPreference;
import com.cleanPhone.mobileCleaner.utility.GlobalData;
import com.cleanPhone.mobileCleaner.utility.PermitActivity;
import com.cleanPhone.mobileCleaner.utility.SharedPrefUtil;
import com.cleanPhone.mobileCleaner.utility.Util;

import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public class ScannigActivity extends PermitActivity implements View.OnClickListener {
    private static final int REQUEST_PERMISSIONS = 887;
    private AnimationDrawable anim;
    private TextView av_progress;
    private Button btn_scanFiles;
    private Context context;
    private int deviceHeight;
    private int deviceWidth;
    private ImageView fb_img;
    private ImageView img;
    private ImageView img_center_left;
    private ImageView img_center_right;
    private ImageView insta_img;
    private boolean isAborted;
    private boolean isWaitScreenShown;
    private ImageView iv_fb;
    private ImageView iv_gmail;
    private ImageView iv_google;
    private ImageView iv_insta;
    private RadarScanView iv_radar;
    private ImageView iv_yahoo;
    private ImageView iv_youtube;
    public LinearLayout j;
    public LinearLayout k;
    public TextView l;
    public TextView m;
    public FrameLayout n;
    public TextView o;
    public TextView p;
    private ProgressBar progressBar;
    private ProgressDialog progressDialog;
    public Button q;
    private RelativeLayout rationalPermissionAlert;
    private boolean resultGenerated;
    public int s;
    private ImageView snap_img;
    public List<ResolveInfo> t;
    private ImageView twitter_img;
    public ImageView[] u;
    public static SCAN_TYPE processRunning = SCAN_TYPE.UPDATION;
    public static volatile boolean stopScanning = false;
    public static boolean isInbackground = false;
    public static boolean isInFront = false;
    private String TAG = "ScannigVertiseScreen";
    public ArrayList<ObjectAnimator> v = new ArrayList<>();

    public Runnable w = new Runnable() {
        @Override
        public void run() {
            ScannigActivity.this.anim.start();
        }
    };

    public enum SCAN_TYPE {
        FAKE_SCAN,
        UPDATION,
        APPS,
        FILES,
        NOTIFICATION
    }

    private void Animation() {
        this.anim = (AnimationDrawable) this.img.getDrawable();
        this.img.post(this.w);
    }

    private void clearAnimation() {
        Iterator<ObjectAnimator> it = this.v.iterator();
        while (it.hasNext()) {
            ObjectAnimator next = it.next();
            if (next.isRunning()) {
                next.cancel();
            }
        }
    }

    public boolean dbExists() {
        return new File("/data/data/" + this.context.getPackageName() + "/databases/" + new SharedPrefUtil(this).getInt(SharedPrefUtil.CURRENTDB) + GlobalData.DB_NAME).exists();
    }


    public void getbacktoHome() {
        finish();
    }

    @SuppressLint("StaticFieldLeak")
    public void scanApps() {
        new ScanService(this) {
            @Override
            public void onPreExecute() {
                super.onPreExecute();
                ScannigActivity.processRunning = SCAN_TYPE.APPS;
            }

            @Override
            public void onPostExecute(ArrayList arrayList) {
                super.onPostExecute(arrayList);
                if (ScannigActivity.stopScanning) {
                    return;
                }
                if (arrayList.size() <= 0) {
                    if (ScannigActivity.super.checkStoragePermissions()) {
                        ScannigActivity.this.scanFiles();
                        return;
                    }
                    ScannigActivity.this.k.setVisibility(View.GONE);
                    ScannigActivity.this.j.setVisibility(View.VISIBLE);
                    ScannigActivity.this.findViewById(R.id.btn_stop).setVisibility(View.GONE);
                    return;
                }
                ScannigActivity.this.finish();
                ScannigActivity.this.startActivity(new Intent(ScannigActivity.this, ResActivity.class).putExtra("results", MobiClean.getInstance().resultMap));
                MobiClean.getInstance().resultMap.put(ScannigActivity.this.getString(R.string.mbc_infected_apps), arrayList);
                try {
                    GlobalData.saveObj(ScannigActivity.this, "infected_list", MobiClean.getInstance().resultMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @SuppressLint("StaticFieldLeak")
            @Override
            public void onProgressUpdate(String... strArr) {
                super.onProgressUpdate(strArr);
                String str = strArr[0];
                String str2 = strArr[1];
                String str3 = strArr[2];
                String str4 = strArr[3];
                ScannigActivity.this.l.setText(String.valueOf(str));
                int parseInt = (Integer.parseInt(str3) * 50) / Integer.parseInt(str4);
                ScannigActivity.this.progressBar.setProgress(parseInt);
                ScannigActivity.this.av_progress.setText(String.valueOf(parseInt));
            }
        }.execute(new String[0]);
    }

    public void scanFiles() {
        this.l.setText(getString(R.string.mbc_scan_files));
        processRunning = SCAN_TYPE.FILES;
        if (super.checkStoragePermissions()) {
            startFilesScanning();
            return;
        }
        super.requestAppPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE", "android.permission.WRITE_EXTERNAL_STORAGE"}, R.string.mbc_runtime_permissions_txt, REQUEST_PERMISSIONS);
        findViewById(R.id.layout_btn).setVisibility(View.INVISIBLE);
        findViewById(R.id.ad_view_banner_container).setVisibility(View.INVISIBLE);
    }

    private void setDimensions() {
        DisplayMetrics displayMetrics = new DisplayMetrics();
        getWindowManager().getDefaultDisplay().getMetrics(displayMetrics);
        this.s = displayMetrics.heightPixels;
        DisplayMetrics displayMetrics2 = new DisplayMetrics();
        WindowManager windowManager = (WindowManager) this.context.getSystemService(Context.WINDOW_SERVICE);
        if (windowManager != null) {
            windowManager.getDefaultDisplay().getMetrics(displayMetrics2);
        }
        this.deviceHeight = displayMetrics2.heightPixels;
        this.deviceWidth = displayMetrics2.widthPixels;
        MySharedPreference.getLngIndex(this.context);
    }

    private void startFilesScanning() {
        this.progressBar.setProgress(50);
        this.av_progress.setText(String.valueOf(50));
        this.m.setText("");
        this.q.setVisibility(View.VISIBLE);
        this.k.setVisibility(View.VISIBLE);
        this.j.setVisibility(View.GONE);
        this.rationalPermissionAlert.setVisibility(View.GONE);
        findViewById(R.id.layout_btn).setVisibility(View.VISIBLE);
        findViewById(R.id.ad_view_banner_container).setVisibility(View.VISIBLE);
        new ScanFiles(this) {
            @Override
            public void onPreExecute() {
                super.onPreExecute();
            }

            @Override
            public void onPostExecute(ArrayList arrayList) {
                super.onPostExecute( arrayList);
                if (ScannigActivity.stopScanning) {
                    return;
                }
                if (arrayList.size() == 0) {
                    ScannigActivity.this.finish();
                    ScannigActivity.this.startActivity(new Intent(ScannigActivity.this, AntiVirusLast.class).putExtra(GlobalData.NOTI_RESULT_BACK, true).putExtra(GlobalData.REDIRECTNOTI, true));
                    return;
                }
                ScannigActivity.this.finish();
                ScannigActivity.this.startActivity(new Intent(ScannigActivity.this, ResActivity.class).putExtra("results", MobiClean.getInstance().resultMap));
                MobiClean.getInstance().resultMap.put(ScannigActivity.this.getString(R.string.mbc_infected_files), arrayList);
                try {
                    GlobalData.saveObj(ScannigActivity.this, "infected_list", MobiClean.getInstance().resultMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            @Override
            public void onProgressUpdate(String... strArr) {
                super.onProgressUpdate( strArr);
                String str = strArr[0];
                String str2 = strArr[1];
                String str3 = strArr[2];
                String str4 = strArr[3];
                ScannigActivity.this.l.setText(String.valueOf(str2));
                int parseInt = ((Integer.parseInt(str3) * 50) / Integer.parseInt(str4)) + 50;
                ScannigActivity.this.progressBar.setProgress(parseInt);
                ScannigActivity.this.av_progress.setText(String.valueOf(parseInt));
            }
        }.execute(new String[0]);
    }

    @SuppressLint("StaticFieldLeak")
    private void startScanning() {
        new CheckDBupdated(this) {
            @Override
            public void onPostExecute(Boolean bool) {
                super.onPostExecute( bool);
                if (ScannigActivity.stopScanning) {
                    return;
                }
                ScannigActivity.this.progressBar.setProgress(0);
                ScannigActivity.this.av_progress.setText(String.valueOf(0));
                if (ScannigActivity.this.dbExists()) {
                    if (bool.booleanValue()) {
                        ScannigActivity scannigActivity = ScannigActivity.this;
                        scannigActivity.l.setText(scannigActivity.getString(R.string.mbc_update_complete));
                    }
                    ScannigActivity.this.scanApps();
                    return;
                }
                ScannigActivity scannigActivity2 = ScannigActivity.this;
                scannigActivity2.l.setText(scannigActivity2.getString(R.string.mbc_update_error));
            }

            @SuppressLint("StaticFieldLeak")
            @Override
            public void onProgressUpdate(String... strArr) {
                super.onProgressUpdate( strArr);
                TextView textView = ScannigActivity.this.l;
                textView.setText("" + strArr[0]);
            }
        }.execute(new String[0]);
    }


    public void initToolbar() {
        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setHomeButtonEnabled(true);
            getSupportActionBar().setTitle("");
        }
    }

    @Override
    public void onBackPressed() {
        if (this.isAborted && this.isWaitScreenShown) {
            Util.appendLogmobiclean(this.TAG, "junk returning as onBackPressed wait stop already open", GlobalData.FILE_NAME);
            return;
        }
        final Dialog dialog = new Dialog(this);
        dialog.requestWindowFeature(1);
        if (dialog.getWindow() != null) {
            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(0));
            dialog.getWindow().getAttributes().windowAnimations = R.style.DefaultDialogAnimation;
        }
        dialog.setContentView(R.layout.new_dialog_junk_cancel);
        dialog.setCancelable(false);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setLayout(-1, -1);
        dialog.getWindow().setGravity(17);
        View space;


         ((ImageView) dialog.findViewById(R.id.dialog_img)).setImageDrawable(ContextCompat.getDrawable(this, R.drawable.dg_a));
        ((TextView) dialog.findViewById(R.id.dialog_title)).setText(getResources().getString(R.string.mbc_anti_virus));
        ((TextView) dialog.findViewById(R.id.dialog_msg)).setText(getResources().getString(R.string.mbc_scan_in_process));
        dialog.findViewById(R.id.ll_no).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ScannigActivity.this.multipleClicked()) {
                    return;
                }
                dialog.dismiss();
            }
        });
        dialog.findViewById(R.id.ll_yes).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ScannigActivity.this.multipleClicked()) {
                    return;
                }
                ScannigActivity.stopScanning = true;
                dialog.dismiss();
                ScannigActivity.this.getbacktoHome();
            }
        });
        dialog.show();
    }

    @Override
    public void onClick(View view) {
        if (multipleClicked()) {
            return;
        }
        if (view.getId() == R.id.btn_stop) {
            onBackPressed();
        } else if (view.getId() == R.id.btn_scanFiles) {
            scanFiles();
        }
    }

    @Override
    public void onCreate(@Nullable Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.scan_screen_layout);
        stopScanning = false;

        this.resultGenerated = false;
        initToolbar();
        x();
        this.t = Util.getInstalledAppList(this.context);
        this.u = new ImageView[]{this.iv_fb, this.iv_google, this.iv_yahoo, this.iv_youtube, this.iv_insta, this.iv_gmail};
        setDimensions();
        Animation();
        if (getIntent().getBooleanExtra("from_result", false)) {
            if (super.checkStoragePermissions()) {
                scanFiles();
                return;
            }
            this.k.setVisibility(View.GONE);
            this.j.setVisibility(View.VISIBLE);
            findViewById(R.id.btn_stop).setVisibility(View.GONE);
            return;
        }
        Util.appendLogmobicleanTest(this.TAG, "Checking internet Connection  ", "dblog.txt");
        if (!Util.isConnectingToInternet(this) && !dbExists()) {
            Util.appendLogmobicleanTest(this.TAG, "internet not connected  ", "dblog.txt");
            TextView textView = this.l;
            textView.setText("" + getString(R.string.mbc_update_error));
            return;
        }
        Util.appendLogmobicleanTest(this.TAG, "internet is connected  ", "dblog.txt");
        startScanning();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem menuItem) {
        onBackPressed();
        return true;
    }

    @Override
    public void onPause() {
        super.onPause();
        isInbackground = true;
        Log.i("FACEBOOK_ADS", "Scan Anti-malware Pause");
        getWindow().clearFlags(128);
    }

    @Override
    public void onPermissionsGranted(int i) {
        RelativeLayout relativeLayout = this.rationalPermissionAlert;
        if (relativeLayout != null) {
            relativeLayout.setVisibility(View.GONE);
            findViewById(R.id.layout_btn).setVisibility(View.VISIBLE);
            findViewById(R.id.ad_view_banner_container).setVisibility(View.VISIBLE);
            if (super.checkStoragePermissions()) {
                startFilesScanning();
            }
        }
    }

    @Override
    public void onResume() {
        super.onResume();
        Util.appendLogmobiclean(this.TAG, "onResume", "");
        isInFront = true;
        isInbackground = false;
        getWindow().addFlags(128);
    }

    public void x() {
        this.context = this;
        ProgressBar progressBar = (ProgressBar) findViewById(R.id.progressBar);
        this.progressBar = progressBar;
        progressBar.getProgressDrawable().setColorFilter(-1, PorterDuff.Mode.SRC_IN);
        LinearLayout linearLayout = (LinearLayout) findViewById(R.id.layout_scan_one);
        RelativeLayout relativeLayout = (RelativeLayout) findViewById(R.id.layout_scan_two);
        this.n = (FrameLayout) findViewById(R.id.frame_mid_laysss);
        this.o = (TextView) findViewById(R.id.ads_btn_countinue);
        this.p = (TextView) findViewById(R.id.ads_btn_cancel);
        TextView textView = (TextView) findViewById(R.id.dialog_title);
        this.av_progress = (TextView) findViewById(R.id.av_progress);
        TextView textView2 = (TextView) findViewById(R.id.dialog_msg);
        this.q = (Button) findViewById(R.id.btn_stop);
        this.btn_scanFiles = (Button) findViewById(R.id.btn_scanFiles);
        this.img = (ImageView) findViewById(R.id.bug_file_img);
        this.btn_scanFiles.setOnClickListener(this);
        this.p.setOnClickListener(this);
        this.o.setOnClickListener(this);
        this.q.setOnClickListener(this);
        this.k = (LinearLayout) findViewById(R.id.txt_linear);
        this.j = (LinearLayout) findViewById(R.id.files_scan_linear);
        this.rationalPermissionAlert = (RelativeLayout) findViewById(R.id.hiddenpermissionlayout);
        this.l = (TextView) findViewById(R.id.name);
        this.m = (TextView) findViewById(R.id.path);
        this.fb_img = (ImageView) findViewById(R.id.fb_img);
        this.insta_img = (ImageView) findViewById(R.id.insta_img);
        this.snap_img = (ImageView) findViewById(R.id.snap_img);
        this.twitter_img = (ImageView) findViewById(R.id.twitter_img);
        this.img_center_left = (ImageView) findViewById(R.id.img_center_left);
        this.img_center_right = (ImageView) findViewById(R.id.img_center_right);
        ((RelativeLayout) findViewById(R.id.rl_permission_close_btn)).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ScannigActivity.this.multipleClicked()) {
                    return;
                }
                ScannigActivity.this.finish();
            }
        });
        closebtnClick();
    }
}
