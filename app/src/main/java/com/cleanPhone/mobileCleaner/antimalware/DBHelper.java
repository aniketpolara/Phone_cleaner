package com.cleanPhone.mobileCleaner.antimalware;

import android.annotation.SuppressLint;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;

import com.cleanPhone.mobileCleaner.MobiClean;
import com.cleanPhone.mobileCleaner.utility.GlobalData;
import com.cleanPhone.mobileCleaner.utility.SharedPrefUtil;

import java.util.ArrayList;

public class DBHelper extends SQLiteOpenHelper {
    private static DBHelper sInstance;
    private final Context context;

    public DBHelper(Context context, String str) {
        super(context, str, (SQLiteDatabase.CursorFactory) null, 1);
        this.context = context;
    }

    public static synchronized DBHelper getInstance(Context context) {
        DBHelper dBHelper;
        synchronized (DBHelper.class) {
            if (sInstance == null) {
                Context applicationContext = context.getApplicationContext();
                sInstance = new DBHelper(applicationContext, new SharedPrefUtil(context).getInt(SharedPrefUtil.CURRENTDB) + GlobalData.DB_NAME);
            }
            dBHelper = sInstance;
        }
        return dBHelper;
    }

    public Integer deleteContact(Integer num) {
        return Integer.valueOf(getWritableDatabase().delete("contacts", "id = ? ", new String[]{Integer.toString(num.intValue())}));
    }


    @SuppressLint("Range")
    public ArrayList<Long> getFileData() {
        ArrayList<Long> arrayList = new ArrayList<>();
        try {
            ArrayList<Long> arrayList2 = new ArrayList<>();
            try {
                SQLiteDatabase readableDatabase = getReadableDatabase();
                Cursor rawQuery = readableDatabase.rawQuery("select * from tb_AdwHashs", null);
                rawQuery.moveToFirst();
                if (rawQuery != null && rawQuery.getCount() != 0) {
                    while (!rawQuery.isAfterLast()) {
                        arrayList2.add(Long.valueOf(rawQuery.getLong(rawQuery.getColumnIndex("crc"))));
                        rawQuery.moveToNext();
                    }
                    readableDatabase.close();
                    return arrayList2;
                }
                return null;
            } catch (Exception unused) {
                arrayList = arrayList2;
                return arrayList;
            }
        } catch (Exception unused2) {
        }
        return arrayList;
    }


    public long getRefreshTime() {
        MobiClean.getInstance();
        long j = MobiClean.REFRESH_TIME;
        try {
            SQLiteDatabase readableDatabase = getReadableDatabase();
            Cursor rawQuery = readableDatabase.rawQuery("select * from version", null);
            rawQuery.moveToFirst();
            if (rawQuery != null && rawQuery.getCount() != 0) {
                @SuppressLint("Range") long j2 = rawQuery.getLong(rawQuery.getColumnIndex("RefreshTime"));
                readableDatabase.close();
                return j2;
            }
            return 10L;
        } catch (Exception unused) {
            return 10L;
        }
    }



    @Override
    public void onCreate(SQLiteDatabase sQLiteDatabase) {
        sQLiteDatabase.execSQL("create table contacts (id integer primary key, name text,phone text,email text, street text,place text)");
    }

    @Override
    public void onUpgrade(SQLiteDatabase sQLiteDatabase, int i, int i2) {
        sQLiteDatabase.execSQL("DROP TABLE IF EXISTS contacts");
        onCreate(sQLiteDatabase);
    }

}
