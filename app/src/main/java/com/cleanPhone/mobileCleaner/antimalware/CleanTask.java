package com.cleanPhone.mobileCleaner.antimalware;

import android.app.ProgressDialog;
import android.content.Context;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Build;
import androidx.annotation.RequiresApi;
import com.cleanPhone.mobileCleaner.R;
import com.cleanPhone.mobileCleaner.tools.FilesGridActivity;
import com.cleanPhone.mobileCleaner.utility.FileUtil;
import com.cleanPhone.mobileCleaner.utility.GlobalData;
import com.cleanPhone.mobileCleaner.utility.MountPoints;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

public class CleanTask extends AsyncTask<Void, Integer, FilesInclude.DELETION_STATUS> {
    public HashMap<String, ArrayList<FilesInclude>> f4801a;
    public HashMap<Long, FilesInclude> b = new HashMap<>();
    private ResActivity context;
    private Intent data;
    private ProgressDialog dialog;
    private int requestCode;
    private int resultCode;
    private DeletionStatus status;

    public interface DeletionStatus {
        void status(FilesInclude.DELETION_STATUS deletion_status);
    }

    public CleanTask(Context context, DeletionStatus deletionStatus, HashMap<String, ArrayList<FilesInclude>> hashMap) {
        this.context = (ResActivity) context;
        this.status = deletionStatus;
        this.f4801a = hashMap;
    }

    private boolean deleteImageFile(FilesInclude filesInclude, boolean z) {
        if (filesInclude.getFile().exists()) {
            if (!z) {
                filesInclude.getFile().delete();
            } else if (Build.VERSION.SDK_INT >= 21) {
                FileUtil.deleteFile(this.context, filesInclude.getFile());
            }
            return true ^ filesInclude.getFile().exists();
        }
        return true;
    }

    private void deleteRecordFromDB(long j) {
    }

    @RequiresApi(api = 21)
    private boolean isBothStorageCanDelete(ArrayList<String> arrayList) {
        for (int i = 0; i < arrayList.size(); i++) {
            if (!FileUtil.isWritableNormalOrSaf(this.context, new File(arrayList.get(i)))) {
                return false;
            }
        }
        return true;
    }

    public FilesInclude.DELETION_STATUS a(boolean z) {
        try {
            ArrayList<FilesInclude> arrayList = this.f4801a.get(this.context.getString(R.string.mbc_infected_files));
            if (arrayList == null) {
                return FilesInclude.DELETION_STATUS.SUCCESS;
            }
            int size = arrayList.size();
            int i = 0;
            while (i < size) {
                FilesInclude filesInclude = arrayList.get(i);
                if (filesInclude.isChecked() && deleteImageFile(filesInclude, z)) {
                    if (this.b.size() > 0) {
                        this.b.remove(Long.valueOf(filesInclude.getCRC64()));
                    }
                    deleteRecordFromDB(filesInclude.getCRC64());
                    arrayList.remove(i);
                    this.context.E();
                    size--;
                } else {
                    i++;
                }
            }
            return FilesInclude.DELETION_STATUS.SUCCESS;
        } catch (Exception e) {
            e.printStackTrace();
            return FilesInclude.DELETION_STATUS.ERROR;
        }
    }

    public void b() {
        if (GlobalData.isObjExist(this.context, "threats")) {
            GlobalData.deleteObj(this.context, "threats");
        }
        try {
            GlobalData.saveObj(this.context, "threats", this.b);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void c(Intent intent) {
        this.data = intent;
    }

    public void d(int i) {
        this.requestCode = i;
    }

    public void e(int i) {
        this.resultCode = i;
    }

    @Override
    public void onPreExecute() {
        HashMap<Long, FilesInclude> hashMap;
        HashMap<Long, FilesInclude> hashMap2 = null;
        super.onPreExecute();
        try {
            if (GlobalData.isObjExist(this.context, "threats")) {
                hashMap2 = (HashMap) GlobalData.getObj(this.context, "threats");
                this.b = hashMap2;
                if (hashMap2 == null) {
                    hashMap = new HashMap<>();
                    this.b = hashMap;
                }
            }
            this.dialog = ProgressDialog.show(this.context, "Cleaning...", "", false, false);
        } catch (Throwable th) {
            if (this.b == null) {
                this.b = new HashMap<>();
            }
            try {
                throw th;
            } catch (IOException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public FilesInclude.DELETION_STATUS doInBackground(Void... voidArr) {
        if (this.f4801a.get(this.context.getString(R.string.mbc_infected_files)) == null) {
            return FilesInclude.DELETION_STATUS.SUCCESS;
        }
        if (FileUtil.IsDeletionBelow6()) {
            return a(false);
        }
        ArrayList<String> returnMountPOints = MountPoints.returnMountPOints(this.context);
        if (returnMountPOints == null) {
            return a(false);
        }
        if (returnMountPOints.size() == 1) {
            return a(false);
        }
        File file = new File(returnMountPOints.get(1));
        if (file.listFiles() != null && file.listFiles().length != 0) {
            if (Build.VERSION.SDK_INT > 21) {
                Intent intent = this.data;
                if (intent != null) {
                    FilesGridActivity.onActivityResultLollipop(this.context, this.requestCode, this.resultCode, intent);
                }
                if (!isBothStorageCanDelete(returnMountPOints)) {
                    return FilesInclude.DELETION_STATUS.PERMISSION;
                }
                return a(true);
            }
            return FilesInclude.DELETION_STATUS.SUCCESS;
        }
        return a(false);
    }

    @Override
    public void onPostExecute(FilesInclude.DELETION_STATUS deletion_status) {
        super.onPostExecute( deletion_status);
        ProgressDialog progressDialog = this.dialog;
        if (progressDialog != null && progressDialog.isShowing()) {
            this.dialog.dismiss();
        }
        b();
        this.status.status(deletion_status);
    }

    @Override
    public void onProgressUpdate(Integer... numArr) {
        super.onProgressUpdate( numArr);
    }
}
