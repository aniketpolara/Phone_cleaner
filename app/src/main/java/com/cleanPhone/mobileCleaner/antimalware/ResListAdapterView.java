package com.cleanPhone.mobileCleaner.antimalware;

import android.annotation.SuppressLint;
import android.content.Context;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.CheckBox;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import androidx.annotation.StringRes;

import com.cleanPhone.mobileCleaner.R;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

public class ResListAdapterView extends BaseExpandableListAdapter {
    private ResActivity _context;
    private List<String> _listDataHeader;
    public int f4809a;
    private boolean isAllChk = false;
    private HashMap<String, ArrayList<FilesInclude>> resultMap;

    public ResListAdapterView(Context context, List<String> list, HashMap<String, ArrayList<FilesInclude>> hashMap) {
        this._context = (ResActivity) context;
        this._listDataHeader = list;
        this.resultMap = hashMap;
    }

    public void allChk(int i, boolean z) {
        this.isAllChk = z;
        ArrayList<FilesInclude> arrayList = this.resultMap.get(this._listDataHeader.get(i));
        if (arrayList != null) {
            Iterator<FilesInclude> it = arrayList.iterator();
            while (it.hasNext()) {
                it.next().setChecked(z);
            }
        }
    }

    public boolean isAllChecked(int i) {
        this.f4809a = 0;
        ArrayList<FilesInclude> arrayList = this.resultMap.get(this._listDataHeader.get(i));
        int size = arrayList != null ? arrayList.size() : 0;
        int i2 = 0;
        while (i2 < size) {
            if (arrayList.get(i2).isChecked()) {
                this.f4809a++;
            }
            i2++;
        }
        return this.f4809a == i2;
    }

    public Object getChild(int i, int i2) {
        return this.resultMap.get(this._listDataHeader.get(i)).get(i2);
    }

    @Override
    public long getChildId(int i, int i2) {
        return i2;
    }


    @Override
    public View getChildView(final int i, final int i2, boolean z, View view, ViewGroup viewGroup) {
        LayoutInflater layoutInflater;
        final FilesInclude filesInclude = (FilesInclude) getChild(i, i2);
        if (view == null && (layoutInflater = (LayoutInflater) this._context.getSystemService(Context.LAYOUT_INFLATER_SERVICE)) != null) {
            view = layoutInflater.inflate(R.layout.issues_item, (ViewGroup) null);
        }
        ImageView imageView = view != null ? (ImageView) view.findViewById(R.id.img) : null;
        TextView textView = view != null ? (TextView) view.findViewById(R.id.name) : null;
        TextView textView2 = view != null ? (TextView) view.findViewById(R.id.path) : null;
        ImageButton imageButton = view != null ? (ImageButton) view.findViewById(R.id.ignore) : null;
        final CheckBox checkBox = (CheckBox) view.findViewById(R.id.chk);
        if (textView != null) {
            textView.setText(filesInclude.getName());
        }
        if (textView2 != null) {
            textView2.setText(filesInclude.getFile().getAbsolutePath());
        }
        checkBox.setChecked(filesInclude.isChecked());
        try {
            if (!filesInclude.isApk() && imageView != null) {
                imageView.setImageResource(R.drawable.av_files);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        checkBox.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view2) {
                if (checkBox.isChecked()) {
                    filesInclude.setChecked(true);
                } else {
                    filesInclude.setChecked(false);
                }
                ResListAdapterView resListAdapterView = ResListAdapterView.this;
                resListAdapterView.isAllChk = resListAdapterView.isAllChecked(i);
                ResListAdapterView.this.notifyDataSetChanged();
            }
        });
        return view;
    }

    @Override
    public int getChildrenCount(int i) {
        return this.resultMap.get(this._listDataHeader.get(i)).size();
    }

    @Override
    public Object getGroup(int i) {
        return this._listDataHeader.get(i);
    }

    @Override
    public int getGroupCount() {
        return this._listDataHeader.size();
    }

    @Override
    public long getGroupId(int i) {
        return i;
    }

    @SuppressLint("WrongConstant")
    @Override
    public View getGroupView(final int i, boolean z, View view, ViewGroup viewGroup) {
        LayoutInflater layoutInflater;
        String str = (String) getGroup(i);
        if (view == null && (layoutInflater = (LayoutInflater) this._context.getSystemService("layout_inÂ«flater")) != null) {
            view = layoutInflater.inflate(R.layout.list_header, (ViewGroup) null);
        }
        ImageView imageView = view != null ? (ImageView) view.findViewById(R.id.rightarrow_junk) : null;
        TextView textView = view != null ? (TextView) view.findViewById(R.id.tvjunkname) : null;
        if (view != null) {
            TextView textView2 = (TextView) view.findViewById(R.id.tvjunksize);
        }
        final CheckBox checkBox = (CheckBox) view.findViewById(R.id.junk_check);
        LinearLayout linearLayout = (LinearLayout) view.findViewById(R.id.grp_checkcontainer);
        checkBox.setClickable(false);
        checkBox.setFocusable(false);
        if (z) {
            if (imageView != null) {
                imageView.animate().rotation(90.0f).start();
            }
        } else if (imageView != null) {
            imageView.animate().rotation(0.0f).start();
        }
        checkBox.setChecked(isAllChecked(i));
        if (textView != null) {
            textView.setText("" + str);
        }
        str.equals(getString(R.string.mbc_infected_apps));
        linearLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view2) {
                if (checkBox.isChecked()) {
                    checkBox.setChecked(false);
                    ResListAdapterView.this.allChk(i, false);
                } else {
                    checkBox.setChecked(true);
                    ResListAdapterView.this.allChk(i, true);
                }
                ResListAdapterView.this.isAllChecked(i);
                ResListAdapterView.this.notifyDataSetChanged();
            }
        });
        return view;
    }

    public String getString(@StringRes int i) {
        return this._context.getString(i);
    }

    @Override
    public boolean hasStableIds() {
        return false;
    }

    @Override
    public boolean isChildSelectable(int i, int i2) {
        return true;
    }
}
