package com.cleanPhone.mobileCleaner.antimalware;

import android.app.Dialog;
import android.app.NotificationManager;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.sqlite.SQLiteDatabase;
import android.graphics.drawable.ColorDrawable;
import android.net.Uri;
import android.os.Bundle;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.WindowManager;
import android.widget.Button;
import android.widget.ExpandableListView;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.core.content.ContextCompat;;
import com.cleanPhone.mobileCleaner.DialogListners;
import com.cleanPhone.mobileCleaner.HomeActivity;
import com.cleanPhone.mobileCleaner.ParentActivity;
import com.cleanPhone.mobileCleaner.R;
import com.cleanPhone.mobileCleaner.Splash;
import com.cleanPhone.mobileCleaner.tools.FilesGridActivity;
import com.cleanPhone.mobileCleaner.utility.GlobalData;
import com.cleanPhone.mobileCleaner.utility.Util;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class ResActivity extends ParentActivity implements View.OnClickListener, DialogListners, CleanTask.DeletionStatus {
    private static final int APP_RESULT = 1042;
    public static int totalFilesCount;
    private int deviceHeight;
    private int deviceWidth;
    private Button fix;
    private TextView issuesCountTxt;
    public Context j;
    public LinearLayout k;
    public LinearLayout l;
    public FrameLayout m;
    public TextView n;
    private boolean noti_result_back;
    public TextView o;
    private boolean redirectToNoti;
    private ResListAdapterView resListAdapterView;
    private ExpandableListView resultList;
    private final String TAG = ResActivity.class.getName();
    private ArrayList<String> _dataHeader = new ArrayList<>();
    private HashMap<String, ArrayList<FilesInclude>> resultMap = new HashMap<>();
    private boolean adLoaded = false;
    public boolean p = false;
    public int q = -1;

    public static class AnonymousClass7 {
        public static final int[] f4808a;

        static {
            int[] iArr = new int[FilesInclude.DELETION_STATUS.values().length];
            f4808a = iArr;
            try {
                iArr[FilesInclude.DELETION_STATUS.ERROR.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                f4808a[FilesInclude.DELETION_STATUS.PERMISSION.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            try {
                f4808a[FilesInclude.DELETION_STATUS.SUCCESS.ordinal()] = 3;
            } catch (NoSuchFieldError unused3) {
            }
        }
    }

    private boolean appInstalledOrNot(String str) {
        try {
            getPackageManager().getPackageInfo(str, 1);
            return true;
        } catch (PackageManager.NameNotFoundException unused) {
            return false;
        }
    }

    private String getStringVal(int i) {
        return i == 1 ? "AV_INFECTEDAPP_NOTI_CLICK" : i == 2 ? "AV_INFECTEDFILE_NOTI_CLICK" : i == 3 ? "AV_CRITICAL_NOTI_CLICK" : "AV_RESULT_SCREEN_PAGE";
    }

    private boolean isAtLeastOneCheck() {
        ResListAdapterView resListAdapterView = this.resListAdapterView;
        return resListAdapterView != null && resListAdapterView.f4809a > 0;
    }

    public static boolean isInstalled(Context context, String str) {
        try {
            context.getPackageManager().getPackageInfo(str, 1);
            return true;
        } catch (PackageManager.NameNotFoundException unused) {
            return false;
        }
    }

    private void removeUninstalledApps() {
        ArrayList<FilesInclude> arrayList = this.resultMap.get(getString(R.string.mbc_infected_apps));
        if (arrayList == null) {
            return;
        }
        ArrayList<FilesInclude> arrayList2 = new ArrayList<>();
        Iterator<FilesInclude> it = arrayList.iterator();
        while (it.hasNext()) {
            FilesInclude next = it.next();
            if (appInstalledOrNot(next.getPkgName())) {
                arrayList2.add(next);
            }
        }
        this.resultMap.put(getString(R.string.mbc_infected_apps), arrayList2);
    }

    private void sendAnalytics() {
        if (this.redirectToNoti) {
            getStringVal(getIntent().getIntExtra("FRM", 0));
        }
    }

    private void showRealTimeDialog() {
        try {
            final Dialog dialog = new Dialog(this);
            dialog.requestWindowFeature(1);
            if (dialog.getWindow() != null) {
                dialog.getWindow().setBackgroundDrawable(new ColorDrawable(0));
                dialog.getWindow().getAttributes().windowAnimations = R.style.DefaultDialogAnimation;
            }
            dialog.setContentView(R.layout.new_dialog_junk_cancel);
            dialog.setCancelable(false);
            dialog.setCanceledOnTouchOutside(false);
            dialog.getWindow().setLayout(-1, -1);
            dialog.getWindow().setGravity(17);
            View space;

((ImageView) dialog.findViewById(R.id.dialog_img)).setImageDrawable(ContextCompat.getDrawable(this, R.drawable.dg_a));
            ((TextView) dialog.findViewById(R.id.dialog_title)).setText(getResources().getString(R.string.mbc_anti_virus));
            ((TextView) dialog.findViewById(R.id.ll_no_txt)).setText(getResources().getString(R.string.mbc_cancel));
            ((TextView) dialog.findViewById(R.id.ll_yes_txt)).setText(getResources().getString(R.string.mbc_ok));
            ((TextView) dialog.findViewById(R.id.dialog_msg)).setText(getResources().getString(R.string.mbc_delete_large_file));
            dialog.findViewById(R.id.ll_no).setOnClickListener(new View.OnClickListener() {
                @Override
                public final void onClick(View view) {
                    ResActivity.v(dialog, view);
                }
            });
            dialog.findViewById(R.id.ll_yes).setOnClickListener(new View.OnClickListener() {
                @Override
                public final void onClick(View view) {
                    ResActivity.this.x(dialog, view);
                }
            });
            dialog.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    private void startDeleteApps() {
        this.p = false;
        ArrayList<FilesInclude> arrayList = this.resultMap.get(getString(R.string.mbc_infected_apps));
        if (arrayList != null && arrayList.size() != 0) {
            for (int i = 0; i < arrayList.size(); i++) {
                if (arrayList.get(i).isChecked()) {
                    this.p = true;
                    y(i, arrayList.get(i).getPkgName());
                    return;
                }
            }
            if (this.p || this.resultMap.size() <= 0) {
                A();
                return;
            }
            return;
        }
        this.resultMap.remove(getString(R.string.mbc_infected_apps));
        if (this.resultMap.size() == 0) {
            GlobalData.deleteObj(this, "infected_list");
            z();
        } else {
            try {
                GlobalData.saveObj(this, "infected_list", this.resultMap);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        this.resListAdapterView.notifyDataSetChanged();
    }

    public static void v(Dialog dialog, View view) {
        if (dialog.isShowing()) {
            dialog.dismiss();
        }
    }

    public void x(Dialog dialog, View view) {
        new CleanTask(this, this, this.resultMap).execute(new Void[0]);
        if (dialog.isShowing()) {
            dialog.dismiss();
        }
    }

    public void A() {
        D();
        F();
        this.resListAdapterView.notifyDataSetChanged();
        if (this.resultMap.size() == 0) {
            GlobalData.deleteObj(this, "infected_list");
            z();
            return;
        }
        try {
            GlobalData.saveObj(this, "infected_list", this.resultMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
        startDeleteApps();
    }

    public SQLiteDatabase B() {
        return SQLiteDatabase.openDatabase(getDatabasePath("apps.db").getAbsolutePath(), null, 0);
    }

    public void C() {
        try {
            this.resultMap = (HashMap) GlobalData.getObj(this, "infected_list");
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
        removeUninstalledApps();
        D();
        F();
        setAdapter();
    }

    public void D() {
        this._dataHeader.clear();
    }

    public void E() {
        try {
            GlobalData.saveObj(this, "infected_list", this.resultMap);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void F() {
        HashMap<String, ArrayList<FilesInclude>> hashMap = this.resultMap;
        if (hashMap == null || hashMap.size() == 0) {
            return;
        }
        int i = 0;
        Iterator<Map.Entry<String, ArrayList<FilesInclude>>> it = this.resultMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry<String, ArrayList<FilesInclude>> next = it.next();
            if (this.resultMap.get(next.getKey()).size() == 0) {
                it.remove();
            } else {
                this._dataHeader.add(next.getKey().toString());
                i += this.resultMap.get(next.getKey()).size();
            }
        }
        H(i);
    }

    public void G() {
        setSupportActionBar((Toolbar) findViewById(R.id.toolbar));
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setDisplayShowHomeEnabled(true);
            getSupportActionBar().setTitle("");
        }
    }

    public void H(int i) {
        this.issuesCountTxt.setText(String.valueOf(i));
    }

    @Override
    public void clickOK() {
        Intent intent = new Intent("android.intent.action.OPEN_DOCUMENT_TREE");
        intent.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
        intent.addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION);
        intent.putExtra("android.intent.extra.LOCAL_ONLY", true);
        intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
        startActivityForResult(intent, FilesGridActivity.REQUEST_CODE_STORAGE_ACCESS_INPUT);
    }

    @Override
    public void onActivityResult(int i, int i2, Intent intent) {
        super.onActivityResult(i, i2, intent);
        if (i == 2415 && i2 == -1) {
            CleanTask cleanTask = new CleanTask(this, this, this.resultMap);
            cleanTask.c(intent);
            cleanTask.d(i);
            cleanTask.e(i2);
            cleanTask.execute(new Void[0]);
        } else if (i == APP_RESULT && -1 == i2) {
            try {
                t(this.resultMap.get(getString(R.string.mbc_infected_apps)).get(this.q).getSignCRC());
            } catch (Exception e) {
                e.printStackTrace();
            }
            this.resultMap.get(getString(R.string.mbc_infected_apps)).remove(this.q);
            if (this.resultMap.size() == 0) {
                GlobalData.deleteObj(this, "infected_list");
                z();
            } else {
                try {
                    GlobalData.saveObj(this, "infected_list", this.resultMap);
                } catch (Exception e2) {
                    e2.printStackTrace();
                }
            }
            D();
            F();
            this.resListAdapterView.notifyDataSetChanged();
            startDeleteApps();
        }
    }

    @Override
    public void onBackPressed() {
        final Dialog dialog = new Dialog(this);
        dialog.requestWindowFeature(1);
        if (dialog.getWindow() != null) {
            dialog.getWindow().setBackgroundDrawable(new ColorDrawable(0));
            dialog.getWindow().getAttributes().windowAnimations = R.style.DefaultDialogAnimation;
        }
        dialog.setContentView(R.layout.new_dialog_junk_cancel);
        dialog.setCancelable(false);
        dialog.setCanceledOnTouchOutside(false);
        dialog.getWindow().setLayout(-1, -1);
        dialog.getWindow().setGravity(17);
        View space;

        ((ImageView) dialog.findViewById(R.id.dialog_img)).setImageDrawable(ContextCompat.getDrawable(this, R.drawable.dg_a));
        ((TextView) dialog.findViewById(R.id.dialog_title)).setText(getResources().getString(R.string.mbc_anti_virus));
        ((TextView) dialog.findViewById(R.id.dialog_msg)).setText(getResources().getString(R.string.mbc_result_back));
        dialog.findViewById(R.id.ll_no).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ResActivity.this.multipleClicked()) {
                    return;
                }
                dialog.dismiss();
            }
        });
        dialog.findViewById(R.id.ll_yes).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (ResActivity.this.multipleClicked()) {
                    return;
                }
                dialog.dismiss();
                if (ResActivity.this.redirectToNoti || ResActivity.this.noti_result_back) {
                    Log.e("HEADER", "444444");
                    if (!Util.isAdsFree(ResActivity.this.j)) {
                        if (!ResActivity.this.adLoaded) {
                            ResActivity.this.startActivity(new Intent(ResActivity.this.j, HomeActivity.class));
                        }
                    } else {
                        ResActivity.this.startActivity(new Intent(ResActivity.this.j, HomeActivity.class));
                    }
                }
                if (!Util.isAdsFree(ResActivity.this.j)) {
                    Log.e("HEADER", "555555555");
                    if (ResActivity.this.adLoaded) {
                        return;
                    }
                    ResActivity.this.finish();
                    return;
                }
                ResActivity.this.finish();
            }
        });
        try {
            dialog.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onClick(View view) {
        if (multipleClicked()) {
            return;
        }
        if (view == this.fix) {
            if (!isAtLeastOneCheck()) {
                Toast.makeText(this, getString(R.string.mbc_at_least), Toast.LENGTH_LONG).show();
                return;
            }
            showRealTimeDialog();
        }
        if (view.getId() == R.id.ads_btn_cancel) {
            Log.e("=========", "onBackPressed Advance Native Ads update_progress() cancle button click");
            this.l.setVisibility(View.GONE);
            this.k.setVisibility(View.VISIBLE);
        }
        if (view.getId() == R.id.ads_btn_countinue) {
            this.l.setVisibility(View.VISIBLE);
            this.k.setVisibility(View.GONE);
            if (this.redirectToNoti || this.noti_result_back) {
                Log.e("HEADER", "444444");
                if (!Util.isAdsFree(this.j)) {
                    if (!this.adLoaded) {
                        startActivity(new Intent(this.j, HomeActivity.class));
                    } else {
                        startActivity(new Intent(this.j, HomeActivity.class));
                    }
                } else {
                    startActivity(new Intent(this.j, HomeActivity.class));
                }
            }
            if (!Util.isAdsFree(this.j)) {
                Log.e("HEADER", "555555555");
                if (!this.adLoaded) {
                    finish();
                    return;
                } else {
                    startActivity(new Intent(this.j, HomeActivity.class));
                    return;
                }
            }
            finish();
        }
    }

    @Override
    public void onCreate(@Nullable Bundle bundle) {
        super.onCreate(bundle);
        setContentView(R.layout.cleaning_screen);

        this.redirectToNoti = getIntent().getBooleanExtra(GlobalData.REDIRECTNOTI, false);
        this.noti_result_back = getIntent().getBooleanExtra(GlobalData.NOTI_RESULT_BACK, false);
        s();
        G();
        u();
        if (bundle != null) {
            this.resultMap = (HashMap) bundle.getSerializable("results");
            int i = bundle.getInt("remove_pos", -1);
            this.q = i;
            if (i < 0) {
                return;
            }
            this.resultMap.get(getString(R.string.mbc_infected_apps)).remove(this.q);
            if (this.resultMap.size() == 0) {
                GlobalData.deleteObj(this, "infected_list");
                z();
            } else {
                try {
                    GlobalData.saveObj(this, "infected_list", this.resultMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            new CleanTask(this, this, this.resultMap).execute(new Void[0]);
        } else {
            C();
        }
        sendAnalytics();
        s();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.av_result_setting, menu);
        return true;
    }

    @Override
    public void onNewIntent(Intent intent) {
        super.onNewIntent(intent);
        Util.appendLogmobiclean(this.TAG, "onNewIntent", "");
        C();
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem menuItem) {
        if (menuItem.getItemId() == 16908332) {
            onBackPressed();
            return true;
        } else if (menuItem.getItemId() == R.id.settings) {
            startActivity(new Intent(this, AVIgnorelist.class));
            return true;
        } else {
            return super.onOptionsItemSelected(menuItem);
        }
    }

    @Override
    public void onRestoreInstanceState(Bundle bundle) {
        super.onRestoreInstanceState(bundle);
    }

    @Override
    public void onResume() {
        super.onResume();
        Util.appendLogmobiclean(this.TAG, "onResume", "");
    }

    @Override
    public void onSaveInstanceState(Bundle bundle) {
        super.onSaveInstanceState(bundle);
        bundle.putSerializable("results", this.resultMap);
        bundle.putSerializable("remove_pos", Integer.valueOf(this.q));
        Util.appendLogmobiclean("", "onSaveInstanceState", "");
    }

    public void s() {
        NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
        if (notificationManager != null) {
            notificationManager.cancel(261);
        }
    }

    public void setAdapter() {
        ResListAdapterView resListAdapterView = new ResListAdapterView(this, this._dataHeader, this.resultMap);
        this.resListAdapterView = resListAdapterView;
        this.resultList.setAdapter(resListAdapterView);
        this.resultList.expandGroup(0);
    }

    @Override
    public void status(FilesInclude.DELETION_STATUS deletion_status) {
        int i = AnonymousClass7.f4808a[deletion_status.ordinal()];
        if (i == 2) {
            Splash.showdialog_sdcard(this, this);
        } else if (i != 3) {
        } else {
            A();
        }
    }

    public void t(long j) {
        SQLiteDatabase B = B();
        try {
            B.delete("valid_apps", "crc=?", new String[]{String.valueOf(j)});
        } finally {
            B.close();
        }
    }

    public void u() {
        this.j = this;
        DisplayMetrics displayMetrics = new DisplayMetrics();
        WindowManager windowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);
        if (windowManager != null) {
            windowManager.getDefaultDisplay().getMetrics(displayMetrics);
        }
        this.deviceHeight = displayMetrics.heightPixels;
        this.deviceWidth = displayMetrics.widthPixels;
        this.fix = (Button) findViewById(R.id.fix);
        this.issuesCountTxt = (TextView) findViewById(R.id.issues_count);
        this.resultList = (ExpandableListView) findViewById(R.id.result_lv);

        this.fix.setOnClickListener(this);
        this.k = (LinearLayout) findViewById(R.id.layout_scan_one);
        this.l = (LinearLayout) findViewById(R.id.layout_scan_two);
        this.m = (FrameLayout) findViewById(R.id.frame_mid_laysss);
        this.n = (TextView) findViewById(R.id.ads_btn_countinue);
        this.o = (TextView) findViewById(R.id.ads_btn_cancel);
        TextView textView = (TextView) findViewById(R.id.dialog_title);
        TextView textView2 = (TextView) findViewById(R.id.dialog_msg);
        this.o.setOnClickListener(this);
        this.n.setOnClickListener(this);
    }

    public void y(int i, String str) {
        this.q = i;
        if (!isInstalled(this, str)) {
            this.resultMap.get(getString(R.string.mbc_infected_apps)).remove(i);
            if (this.resultMap.size() == 0) {
                GlobalData.deleteObj(this, "infected_list");
                z();
            } else {
                try {
                    GlobalData.saveObj(this, "infected_list", this.resultMap);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            startDeleteApps();
            return;
        }
        Intent intent = new Intent("android.intent.action.UNINSTALL_PACKAGE");
        intent.setData(Uri.parse("package:" + str));
        intent.putExtra("android.intent.extra.RETURN_RESULT", true);
        startActivityForResult(intent, APP_RESULT);
    }

    public void z() {
        if (ScannigActivity.processRunning == ScannigActivity.SCAN_TYPE.APPS) {
            Util.appendLogmobiclean("ResActivity", "Last scan type is apps", "");
            startActivity(new Intent(this, ScannigActivity.class).putExtra("from_result", true));
            finish();
            return;
        }
        if (!this.redirectToNoti && !this.noti_result_back) {
            startActivity(new Intent(this, AntiVirusLast.class).putExtra("DATA", getString(R.string.mbc_av_protected)).putExtra("TYPE", "AV"));
        } else {
            startActivity(new Intent(this, AntiVirusLast.class).putExtra("DATA", getString(R.string.mbc_av_protected)).putExtra("TYPE", "AV").putExtra(GlobalData.NOTI_RESULT_BACK, true).putExtra(GlobalData.REDIRECTNOTI, true));
        }
        finish();
    }
}
